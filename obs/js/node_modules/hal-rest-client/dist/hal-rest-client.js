"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
require("reflect-metadata");
var hal_json_parser_1 = require("./hal-json-parser");
var hal_resource_1 = require("./hal-resource");
/**
 * base to rest client
 *
 * can fetch resource :
 * ``` ts
 * let resource = await new HalRestClient().fetch('http://foo.bar/resource');
 *
 * // can access properties with
 * resource.prop('my_prop')
 *
 * // can get _links with
 * var linkResource = resource.link('my_link')
 *
 * // can fetch link
 * await linkResource.fetch();
 * ```
 */
var HalRestClient = /** @class */ (function () {
    function HalRestClient(baseURL, options) {
        if (options === void 0) { options = {}; }
        this.baseURL = baseURL;
        var config = options;
        config.baseURL = baseURL;
        this.axios = axios_1.default.create(config);
        this.setJsonParser(new hal_json_parser_1.JSONParser(this));
    }
    /**
     * fetch an URI on HalResource
     *
     * @param resourceURI : The uri to fetch
     */
    HalRestClient.prototype.fetchResource = function (resourceURI) {
        return this.fetch(resourceURI, hal_resource_1.HalResource);
    };
    /**
     * fetch an array by URI. Rest result can be a simple array of hal resouce, or han hal resource who have a
     * property who is array of resource on _embedded.
     *
     * @param resourceURI : the uri of resource to fetch
     * @param c : model class to map result (array items). if you don't write your model, use HalResource class
     */
    HalRestClient.prototype.fetchArray = function (resourceURI, c) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.axios.get(resourceURI).then(function (value) {
                var array;
                if (!Array.isArray(value.data)) {
                    if ("_embedded" in value.data) {
                        var embedded = value.data._embedded;
                        array = embedded[Object.keys(embedded)[0]];
                        if (!Array.isArray(array)) {
                            reject(new Error("property _embedded." + Object.keys(embedded)[0] + " is not an array"));
                        }
                    }
                    else {
                        reject(new Error("unparsable array. it's neither an array nor an halResource"));
                    }
                }
                else {
                    array = value.data;
                }
                resolve(array.map(function (item) { return _this.jsonPaser.jsonToResource(item, c); }));
            }).catch(reject);
        });
    };
    /**
     * call an URI to fetch a resource
     *
     * @param resourceURI : the uri of resource to fetch
     * @param c : the class to use to fetch. If you don't want to write you model, use HalResource or @{see fetchResource}
     * @param resource : don't use. internal only
     */
    HalRestClient.prototype.fetch = function (resourceURI, c, resource) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.axios.get(resourceURI).then(function (value) {
                resolve(_this.jsonPaser.jsonToResource(value.data, c, resource, value.config.url));
            }).catch(reject);
        });
    };
    /**
     * Delete object support
     *
     * according server, return can be :
     *   - the request
     *   - an halResource returned by server
     *   - a json object return by server
     *
     * @param resource : The resource to delete
     */
    HalRestClient.prototype.delete = function (resource) {
        var _this = this;
        var uri;
        var type;
        if (typeof resource === "string") {
            uri = resource;
            type = hal_resource_1.HalResource;
        }
        else {
            uri = resource.uri.resourceURI;
            type = resource.constructor;
        }
        return new Promise(function (resolve, reject) {
            _this.axios.delete(uri).then(function (value) {
                _this.resolveUnknowTypeReturn(resolve, value, type);
            }).catch(reject);
        });
    };
    /**
     * run put or patch request
     * @param url : resource url to update
     * @param json : request body send
     * @param full : true or false. true send put, false send patch. Default patch
     * @param type: if hal service return entity, type can be used to map return to an entity model
     */
    HalRestClient.prototype.update = function (url, data, full, type) {
        var _this = this;
        if (full === void 0) { full = false; }
        if (type === void 0) { type = hal_resource_1.HalResource; }
        var method = full ? "put" : "patch";
        return new Promise(function (resolve, reject) {
            _this.axios.request({ data: data, method: method, url: url }).then(function (value) {
                _this.resolveUnknowTypeReturn(resolve, value, type, url);
            }).catch(reject);
        });
    };
    /**
     * run post request
     * @param uri {string} resource uri to update
     * @param json {object} request body send
     * @param type {IHalResourceConstructor} if hal service return entity, type can be used to map return
     *                                        to an entity model
     */
    HalRestClient.prototype.create = function (uri, json, type) {
        var _this = this;
        if (type === void 0) { type = hal_resource_1.HalResource; }
        return new Promise(function (resolve, reject) {
            _this.axios.post(uri, json).then(function (value) {
                _this.resolveUnknowTypeReturn(resolve, value, type, uri);
            }).catch(reject);
        });
    };
    /**
     * add header configuration
     * @param header {string} the header name
     * @param value {string} the header value
     *
     * @return {HalRestClient} thiss
     */
    HalRestClient.prototype.addHeader = function (header, value) {
        this.config.headers.common[header] = value;
        return this;
    };
    Object.defineProperty(HalRestClient.prototype, "config", {
        /**
         * Get axios config for customization
         *
         * @return {AxiosRequestConfig}
         */
        get: function () {
            return this.axios.defaults;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HalRestClient.prototype, "interceptors", {
        /**
         * get axions config interceptor
         * @return {AxiosInterceptorManager}
         */
        get: function () {
            return this.axios.interceptors;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * set the json parser
     * @param {JSONParser} the new json parser
     */
    HalRestClient.prototype.setJsonParser = function (parser) {
        this.jsonPaser = parser;
    };
    /**
     * resolve a service return (delete/patch/put/post)
     *
     * @param resolve : callback function
     * @param value : the returned value
     */
    HalRestClient.prototype.resolveUnknowTypeReturn = function (resolve, value, type, fetchedURI) {
        if (value.data) {
            if (typeof value.data === "object" && "_links" in value.data) {
                resolve(this.jsonPaser.jsonToResource(value.data, type, undefined, fetchedURI));
            }
            else {
                resolve(value.data);
            }
        }
        else {
            resolve(value);
        }
    };
    return HalRestClient;
}());
exports.HalRestClient = HalRestClient;
//# sourceMappingURL=hal-rest-client.js.map