import { IJSONSerializer } from "./hal-json-serializer";
import { IHalResource } from "./hal-resource-interface";
import { HalRestClient } from "./hal-rest-client";
import { URI } from "./uri";
export declare class HalResource implements IHalResource {
    protected _uri?: URI;
    readonly links: {};
    readonly props: {};
    isLoaded: boolean;
    protected restClient: HalRestClient;
    private readonly settedProps;
    private readonly settedLinks;
    private initEnded;
    constructor(restClient: HalRestClient | HalResource, _uri?: URI);
    fetch(forceOrParams?: boolean | object): Promise<this>;
    /**
     * to clear value use null not undefined
     */
    prop(name: string, value?: any): any;
    uri: URI;
    /**
     * to clear value use null not undefined
     */
    link(name: string, value?: any): any;
    /**
     * delete the resource
     * according server, return can be :
     *   - the request
     *   - an halResource returned by server
     *   - a json object return by server
     */
    delete(): Promise<any>;
    onInitEnded(): void;
    /**
     * update the resource
     *
     * @param serializer : object used to serialize the prop and link value
     */
    update(serializer?: IJSONSerializer): Promise<any>;
    /**
     * save the resource
     */
    create(serializer?: IJSONSerializer): Promise<any>;
    reset(): void;
    /**
     * get the service prop name corresponding to ts attribute name
     */
    protected tsProptoHalProd(prop: string): any;
    /**
     * serialize this object to json
     */
    private serialize;
}
