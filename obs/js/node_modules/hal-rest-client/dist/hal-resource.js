"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hal_json_serializer_1 = require("./hal-json-serializer");
var hal_rest_client_1 = require("./hal-rest-client");
var HalResource = /** @class */ (function () {
    function HalResource(restClient, _uri) {
        this._uri = _uri;
        this.links = {};
        this.props = {};
        this.isLoaded = false;
        this.settedProps = [];
        this.settedLinks = [];
        this.initEnded = false;
        if (restClient instanceof hal_rest_client_1.HalRestClient) {
            this.restClient = restClient;
        }
        else {
            this.restClient = restClient.restClient;
            this.links = restClient.links;
            this.props = restClient.props;
            this.settedLinks = restClient.settedLinks;
            this.settedProps = restClient.settedProps;
            this._uri = restClient._uri;
        }
    }
    HalResource.prototype.fetch = function (forceOrParams) {
        var _this = this;
        if ((this.isLoaded && !forceOrParams) || this.uri === undefined) {
            return new Promise(function (resolve) { return resolve(_this); });
        }
        else {
            return this.restClient.fetch(this.uri.fill(forceOrParams), this.constructor, this);
        }
    };
    /**
     * to clear value use null not undefined
     */
    HalResource.prototype.prop = function (name, value) {
        if (value !== void 0) {
            if (this.links[name]) {
                this.link(name, value);
            }
            else {
                this.props[name] = value;
                if (this.initEnded) {
                    this.settedProps.push(name);
                }
            }
            return this;
        }
        else {
            if (this.props[name] !== undefined) {
                return this.props[name];
            }
            else if (this.links[name]) {
                return this.link(name);
            }
        }
    };
    Object.defineProperty(HalResource.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        set: function (uri) {
            this._uri = uri;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * to clear value use null not undefined
     */
    HalResource.prototype.link = function (name, value) {
        if (value !== void 0) {
            this.links[name] = value;
            if (this.initEnded) {
                this.settedLinks.push(name);
            }
            return this;
        }
        else {
            return this.links[name];
        }
    };
    /**
     * delete the resource
     * according server, return can be :
     *   - the request
     *   - an halResource returned by server
     *   - a json object return by server
     */
    HalResource.prototype.delete = function () {
        return this.restClient.delete(this);
    };
    HalResource.prototype.onInitEnded = function () {
        this.initEnded = true;
    };
    /**
     * update the resource
     *
     * @param serializer : object used to serialize the prop and link value
     */
    HalResource.prototype.update = function (serializer) {
        var json = this.serialize(this.settedProps, this.settedLinks, serializer);
        return this.restClient.update(this.uri.resourceURI, json, false, this.constructor);
    };
    /**
     * save the resource
     */
    HalResource.prototype.create = function (serializer) {
        var json = this.serialize(Object.keys(this.props), Object.keys(this.links), serializer);
        return this.restClient.create(this.uri.fetchedURI, json, this.constructor);
    };
    HalResource.prototype.reset = function () {
        var _this = this;
        Object.keys(this.props).forEach(function (prop) {
            delete _this.props[prop];
        });
        Object.keys(this.links).forEach(function (prop) {
            delete _this.props[prop];
        });
    };
    /**
     * get the service prop name corresponding to ts attribute name
     */
    HalResource.prototype.tsProptoHalProd = function (prop) {
        var tsToHal = Reflect.getMetadata("halClient:tsToHal", this.constructor.prototype) || {};
        return tsToHal[prop] || prop;
    };
    /**
     * serialize this object to json
     */
    HalResource.prototype.serialize = function (props, links, serializer) {
        if (serializer === void 0) { serializer = new hal_json_serializer_1.DefaultSerializer(); }
        var json = {};
        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
            var prop = props_1[_i];
            var jsonKey = this.tsProptoHalProd(prop);
            if (this.props[prop] !== undefined && this.props[prop] !== null && this.props[prop].onInitEnded !== undefined) {
                json[jsonKey] = serializer.parseResource(this.props[prop]);
            }
            else {
                json[jsonKey] = serializer.parseProp(this.props[prop]);
            }
        }
        for (var _a = 0, links_1 = links; _a < links_1.length; _a++) {
            var link = links_1[_a];
            var jsonKey = this.tsProptoHalProd(link);
            json[jsonKey] = serializer.parseResource(this.links[link]);
        }
        return json;
    };
    return HalResource;
}());
exports.HalResource = HalResource;
//# sourceMappingURL=hal-resource.js.map