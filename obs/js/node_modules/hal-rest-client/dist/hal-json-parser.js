"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hal_factory_1 = require("./hal-factory");
var hal_resource_1 = require("./hal-resource");
var uri_1 = require("./uri");
var JSONParser = /** @class */ (function () {
    function JSONParser(halRestClient) {
        this.halRestClient = halRestClient;
    }
    /**
     * convert a json to an halResource
     */
    JSONParser.prototype.jsonToResource = function (json, c, resource, fetchedURI) {
        var _this = this;
        if (!("_links" in json)) {
            throw new Error("object is not hal resource " + JSON.stringify(json));
        }
        if (!resource) {
            var uri = void 0;
            if (json._links.self) {
                uri = "string" === typeof json._links.self ? json._links.self : json._links.self.href;
            }
            resource = hal_factory_1.createResource(this.halRestClient, c, uri);
            resource.reset();
        }
        // get translation between hal-service-name and name on ts class
        var halToTs = Reflect.getMetadata("halClient:halToTs", c.prototype) || {};
        var processLink = function (link, type) {
            var href = _this.extractURI(link);
            var linkResource = hal_factory_1.createResource(_this.halRestClient, type, href);
            for (var _i = 0, _a = Object.keys(link); _i < _a.length; _i++) {
                var propKey = _a[_i];
                linkResource.prop(propKey, link[propKey]);
            }
            return linkResource;
        };
        for (var key in json) {
            if ("_links" === key) {
                var links = json._links;
                var _loop_1 = function (linkKey) {
                    if ("self" !== linkKey) {
                        var type_1 = Reflect.getMetadata("halClient:specificType", c.prototype, linkKey) || hal_resource_1.HalResource;
                        var propKey = halToTs[linkKey] || linkKey;
                        var link = links[linkKey];
                        var result = Array.isArray(link)
                            ? link.map(function (item) { return processLink(item, type_1); })
                            : processLink(link, type_1);
                        resource.link(propKey, result);
                    }
                };
                for (var linkKey in json._links) {
                    _loop_1(linkKey);
                }
                if (links.self) {
                    resource.uri = this.extractURI(links.self, fetchedURI);
                }
            }
            else if ("_embedded" === key) {
                var embedded = json._embedded;
                for (var _i = 0, _a = Object.keys(embedded); _i < _a.length; _i++) {
                    var prop = _a[_i];
                    var propKey = halToTs[prop] || prop;
                    resource.prop(propKey, this.parseJson(embedded[prop], c, propKey));
                }
            }
            else {
                var propKey = halToTs[key] || key;
                resource.prop(propKey, this.parseJson(json[key], c, propKey));
            }
        }
        resource.isLoaded = true;
        resource.onInitEnded();
        return resource;
    };
    /**
     * parse a json to object
     */
    JSONParser.prototype.parseJson = function (json, clazz, key) {
        var _this = this;
        // if there are _links prop object is a resource
        if (null === json) {
            return null;
        }
        else if (Array.isArray(json)) {
            var type = Reflect.getMetadata("halClient:specificType", clazz.prototype, key) || hal_resource_1.HalResource;
            return json.map(function (item) { return _this.parseJson(item, clazz, key); });
        }
        else if (typeof json === "object" && json._links !== undefined) {
            var type = Reflect.getMetadata("halClient:specificType", clazz.prototype, key) || hal_resource_1.HalResource;
            return this.jsonToResource(json, type);
        }
        else {
            return json;
        }
    };
    JSONParser.prototype.extractURI = function (link, fetchedURI) {
        if (typeof link === "string") {
            return new uri_1.URI(link, false, fetchedURI);
        }
        else {
            var uri = link.href;
            var templated = link.templated || false;
            return new uri_1.URI(uri, templated, fetchedURI);
        }
    };
    return JSONParser;
}());
exports.JSONParser = JSONParser;
//# sourceMappingURL=hal-json-parser.js.map