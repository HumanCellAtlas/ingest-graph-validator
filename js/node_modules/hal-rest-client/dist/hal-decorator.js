"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
/**
 * get the transco decorator
 */
function getTransco(transconame, target) {
    var transco = Reflect.getMetadata("halClient:" + transconame, target);
    if (transco === undefined) {
        transco = {};
        Reflect.defineMetadata("halClient:" + transconame, transco, target);
    }
    return transco;
}
function HalProperty(nameOrType, maybeType) {
    var propType;
    var propName;
    var error = false;
    if (nameOrType) {
        if (typeof nameOrType === "string") {
            propName = nameOrType;
        }
        else {
            propType = nameOrType;
        }
        if (maybeType) {
            if (typeof nameOrType === "function") {
                error = true;
            }
            else {
                propType = maybeType;
            }
        }
    }
    return function (target, key) {
        if (error) {
            throw new Error(target.constructor.name + "." + key + " @HalProperty parameters are 'name' and 'type', not reverse");
        }
        var baseType = Reflect.getMetadata("design:type", target, key);
        if (baseType === Array && propType === undefined) {
            throw new Error(target.constructor.name + "." + key + " for Array you need to specify a type on @HalProperty." +
                "Example : @HalProperty(HalResource) or  @HalProperty(ClassOfArrayContent)");
        }
        var halToTs = getTransco("halToTs", target);
        var tsToHal = getTransco("tsToHal", target);
        halToTs[propName || key] = key;
        tsToHal[key] = propName || key;
        var type = propType || baseType;
        Reflect.defineMetadata("halClient:specificType", type, target, key);
        if (propName && propType) {
            Reflect.defineMetadata("halClient:specificType", type, target, propName);
        }
        // Delete property.
        if (delete target[key]) {
            // Create new property with getter and setter
            Object.defineProperty(target, key, {
                get: function () { return this.prop(key); },
                set: function (value) { this.prop(key, value); },
                configurable: true,
                enumerable: true,
            });
        }
    };
}
exports.HalProperty = HalProperty;
//# sourceMappingURL=hal-decorator.js.map