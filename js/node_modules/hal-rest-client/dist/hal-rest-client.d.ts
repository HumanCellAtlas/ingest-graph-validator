import { AxiosInterceptorManager, AxiosRequestConfig, AxiosResponse } from "axios";
import "reflect-metadata";
import { JSONParser } from "./hal-json-parser";
import { HalResource } from "./hal-resource";
import { IHalResource, IHalResourceConstructor } from "./hal-resource-interface";
/**
 * base to rest client
 *
 * can fetch resource :
 * ``` ts
 * let resource = await new HalRestClient().fetch('http://foo.bar/resource');
 *
 * // can access properties with
 * resource.prop('my_prop')
 *
 * // can get _links with
 * var linkResource = resource.link('my_link')
 *
 * // can fetch link
 * await linkResource.fetch();
 * ```
 */
export declare class HalRestClient {
    private baseURL?;
    private axios;
    private jsonPaser;
    constructor(baseURL?: string, options?: AxiosRequestConfig);
    /**
     * fetch an URI on HalResource
     *
     * @param resourceURI : The uri to fetch
     */
    fetchResource(resourceURI: string): Promise<HalResource>;
    /**
     * fetch an array by URI. Rest result can be a simple array of hal resouce, or han hal resource who have a
     * property who is array of resource on _embedded.
     *
     * @param resourceURI : the uri of resource to fetch
     * @param c : model class to map result (array items). if you don't write your model, use HalResource class
     */
    fetchArray<T extends IHalResource>(resourceURI: string, c: IHalResourceConstructor<T>): Promise<T[]>;
    /**
     * call an URI to fetch a resource
     *
     * @param resourceURI : the uri of resource to fetch
     * @param c : the class to use to fetch. If you don't want to write you model, use HalResource or @{see fetchResource}
     * @param resource : don't use. internal only
     */
    fetch<T extends IHalResource>(resourceURI: string, c: IHalResourceConstructor<T>, resource?: T): Promise<T>;
    /**
     * Delete object support
     *
     * according server, return can be :
     *   - the request
     *   - an halResource returned by server
     *   - a json object return by server
     *
     * @param resource : The resource to delete
     */
    delete(resource: IHalResource | string): Promise<any>;
    /**
     * run put or patch request
     * @param url : resource url to update
     * @param json : request body send
     * @param full : true or false. true send put, false send patch. Default patch
     * @param type: if hal service return entity, type can be used to map return to an entity model
     */
    update(url: string, data: object, full?: boolean, type?: IHalResourceConstructor<any>): Promise<any>;
    /**
     * run post request
     * @param uri {string} resource uri to update
     * @param json {object} request body send
     * @param type {IHalResourceConstructor} if hal service return entity, type can be used to map return
     *                                        to an entity model
     */
    create(uri: string, json: object, type?: IHalResourceConstructor<any>): Promise<any>;
    /**
     * add header configuration
     * @param header {string} the header name
     * @param value {string} the header value
     *
     * @return {HalRestClient} thiss
     */
    addHeader(header: string, value: string): HalRestClient;
    /**
     * Get axios config for customization
     *
     * @return {AxiosRequestConfig}
     */
    readonly config: AxiosRequestConfig;
    /**
     * get axions config interceptor
     * @return {AxiosInterceptorManager}
     */
    readonly interceptors: {
        request: AxiosInterceptorManager<AxiosRequestConfig>;
        response: AxiosInterceptorManager<AxiosResponse>;
    };
    /**
     * set the json parser
     * @param {JSONParser} the new json parser
     */
    setJsonParser(parser: JSONParser): void;
    /**
     * resolve a service return (delete/patch/put/post)
     *
     * @param resolve : callback function
     * @param value : the returned value
     */
    private resolveUnknowTypeReturn;
}
